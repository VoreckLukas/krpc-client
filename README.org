#+TITLE: kRPC Client

Rust client for kRPC.

* Development
** Complete prototype

Create a complete prototype of a service implementation to guide code generation.

*** DONE Prototype a function with arguments
CLOSED: [2022-01-06 Thu 11:50]
:LOGBOOK:
CLOCK: [2022-01-06 Thu 11:01]--[2022-01-06 Thu 11:50] =>  0:49
:END:
*** DONE Prototype a function with complex return type
CLOSED: [2022-01-06 Thu 14:36]
:LOGBOOK:
CLOCK: [2022-01-06 Thu 12:34]--[2022-01-06 Thu 14:36] =>  2:02
:END:

e.g. Tuple, etc.

*** DONE Prototype an rpc on a generated type
CLOSED: [2022-01-06 Thu 18:34]
:LOGBOOK:
CLOCK: [2022-01-06 Thu 18:14]--[2022-01-06 Thu 18:34] =>  0:20
CLOCK: [2022-01-06 Thu 18:08]--[2022-01-06 Thu 18:13] =>  0:05
:END:

e.g. AutoPilot_get_TargetPitch where AutoPilot may need a reference to the client or the service module or something.

*** TODO Determine if prost can do the work of protobuf::CodedInputStream somehow

** Code generation

Generate service modules as prototyped based on the json files distributed with the kRPC server mod. Starting without a separate templating engine---see about generating by hand.

*** TODO Create service mod template
*** TODO Write classes and enums to template
*** TODO Next steps

** Later
*** TODO Streams

** Way later
*** Error handling

There isn't any.

*** Batched requests and responses

All of the request/response conveniece functions assume single entry responses, but eventually a collection of responses should be accounted for.
